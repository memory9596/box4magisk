#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})

source ${scripts_dir}/box.config

mkdir -p ${run_path}
mkdir -p ${box_path}/${bin_name}

# ${box_path}/bin/yq -i ".tproxy-port=${tproxy_port}" ${box_path}/clash/config.yaml
# ${box_path}/bin/yq -i ".dns.listen=\"${clash_dns_listen}\"" ${box_path}/clash/config.yaml
# ${box_path}/bin/yq -i ".dns.fake-ip-range=\"${clash_fake_ip_range}\"" ${box_path}/clash/config.yaml

# ${box_path}/bin/yq -o=json -i "(.inbounds[] | select(.type == \"tproxy\") | .listen_port) = ${tproxy_port}" ${box_path}/sing-box/config.json

find ${box_path} -mtime +3 -type f -name "*.log" | xargs rm -f

log() {
  export TZ=Asia/Shanghai
  now=$(date +"[%Y-%m-%d %H:%M:%S %Z]")
  case $1 in
    Info)
      [ -t 1 ] && echo -e "\033[1;32m${now} [Info]: $2\033[0m" || echo "${now} [Info]: $2"
      ;;
    Warn)
      [ -t 1 ] && echo -e "\033[1;33m${now} [Warn]: $2\033[0m" || echo "${now} [Warn]: $2"
      ;;
    Error)
      [ -t 1 ] && echo -e "\033[1;31m${now} [Error]: $2\033[0m" || echo "${now} [Error]: $2"
      ;;
    *)
      [ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
      ;;
  esac
}

create_tun_link() {
  mkdir -p /dev/net
  [ ! -L /dev/net/tun ] && ln -s /dev/tun /dev/net/tun
}

probe_tun_device() {
  ifconfig | grep -q ${tun_device} || return 1
}

forward() {
  iptables -w 100 $1 FORWARD -o ${tun_device} -j ACCEPT
  iptables -w 100 $1 FORWARD -i ${tun_device} -j ACCEPT
  ip6tables -w 100 $1 FORWARD -o ${tun_device} -j ACCEPT
  ip6tables -w 100 $1 FORWARD -i ${tun_device} -j ACCEPT
}

check_permission() {
  bin_path=${box_path}/bin/$1
  if which $1 | grep -q "/system/bin/" ; then
    box_user=$(echo ${box_user_group} | awk -F ':' '{print $1}')
    box_group=$(echo ${box_user_group} | awk -F ':' '{print $2}')
    box_user_id=$(id -u ${box_user})
    box_group_id=$(id -g ${box_group})
    [ ${box_user_id} ] && [ ${box_group_id} ] || \
    (box_user_group="root:net_admin" && log Error "${box_user_group} error, use root:net_admin instead.")
    chown ${box_user_group} ${bin_path}
    chmod 0755 ${bin_path}
    if [ "${box_user_id}" != "0" ] || [ "${box_group_id}" != "3005" ] ; then
      # setcap has been deprecated as it does not support binary outside of the /system/bin directory
      setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service,cap_sys_ptrace,cap_dac_read_search+ep' ${bin_path} || \
      (box_user_group="root:net_admin" && log Error "setcap authorization failed, you may need libcap package.")
    fi
    chown -R ${box_user_group} ${box_path}
    return 0
  elif [ -f ${bin_path} ] ; then
    box_user_group="root:net_admin"
    chown ${box_user_group} ${bin_path}
    chmod 0700 ${bin_path}
    chown -R ${box_user_group} ${box_path}
    return 0
  else
    return 1
  fi
}

start_bin() {
  ulimit -SHn 1000000
  bin_path=${box_path}/bin/$1
  pid_file="${run_path}/$1.pid"
  case $1 in
    sing-box)
      if ${bin_path} check -D ${box_path}/$1 > ${run_path}/check.log 2>&1 ; then
        log Info "starting $1 service."
        nohup busybox setuidgid ${box_user_group} ${bin_path} run -D ${box_path}/$1 > /dev/null 2> ${run_path}/error_$1.log &
        echo -n $! > ${pid_file}
        return 0
      else
        log Error "configuration check failed, please check the ${run_path}/check.log file."
        return 1
      fi
      ;;
    clash)
      if ${bin_path} -t -d ${box_path}/$1 > ${run_path}/check.log 2>&1 ; then
        log Info "starting $1 service."
        nohup busybox setuidgid ${box_user_group} ${bin_path} -d ${box_path}/$1 > ${box_path}/$1/$1_$(date +%Y%m%d%H%M).log 2> ${run_path}/error_$1.log &
        echo -n $! > ${pid_file}
        return 0
      else
        log Error "configuration check failed, please check the ${run_path}/check.log file."
        return 1
      fi
      ;;
    mihomo)
      if ${bin_path} -t -d ${box_path}/${bin_name} > ${run_path}/check.log 2>&1 ; then
        log Info "starting ${bin_name} service."
        nohup busybox setuidgid ${box_user_group} ${bin_path} -d ${box_path}/${bin_name} > ${box_path}/${bin_name}/${bin_name}_$(date +%Y%m%d%H%M).log 2> ${run_path}/error_${bin_name}.log &
        echo -n $! > ${pid_file}
        return 0
      else
        log Error "configuration check failed, please check the ${run_path}/check.log file."
        return 1
      fi
      ;;
    xray)
      export XRAY_LOCATION_ASSET="${box_path}/$1"
      if ${bin_path} -test -confdir ${box_path}/$1 > ${run_path}/check.log 2>&1 ; then
        log Info "starting $1 service."
        nohup busybox setuidgid ${box_user_group} ${bin_path} -confdir ${box_path}/$1 > /dev/null 2> ${run_path}/error_$1.log &
        echo -n $! > ${pid_file}
        return 0
      else
        log Error "configuration check failed, please check the ${run_path}/check.log file."
        return 1
      fi
      ;;
    v2ray)
      export V2RAY_LOCATION_ASSET="${box_path}/$1"
      if ${bin_path} test -d ${box_path}/$1 > ${run_path}/check.log 2>&1 ; then
        log Info "starting $1 service."
        nohup busybox setuidgid ${box_user_group} ${bin_path} run -d ${box_path}/$1 > /dev/null 2> ${run_path}/error_$1.log &
        echo -n $! > ${pid_file}
        return 0
      else
        log Error "configuration check failed, please check the ${run_path}/check.log file."
        return 1
      fi
      ;;
    AdguardHome)
          nohup busybox setuidgid ${box_user_group} ${bin_path} -w ${box_path}/$1 > ${run_path}/check_$1.log 2> &1 &
          echo -n $! > ${pid_file}
          if [ -s ${pid_file} ] ; then
            log Info "starting $1 service."
            return 0
          else
            log Error "configuration check failed, please check the ${run_path}/check_$1.log file."
            return 1
          fi
          ;;
        mosdns)
          nohup busybox setuidgid ${box_user_group} ${bin_path} start -d ${box_path}/$1 > ${run_path}/check_$1.log 2> &1 &
          echo -n $! > ${pid_file}
          if [ -s ${pid_file} ] ; then
            log Info "starting $1 service."
            return 0
          else
            log Error "configuration check failed, please check the ${run_path}/check_$1.log file."
            return 1
          fi
          ;;
    *)
      log Error "$1 core error, it must be one of ${bin_name_list[*]}"
      return 2
      ;;
  esac
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_bin_listen() {
  wait_count=0
  bin_pid=$(busybox pidof $1)
  find_netstat_path && \
  check_bin_cmd="netstat -tnulp | grep -q $1" || \
  check_bin_cmd="ls -lh /proc/${bin_pid}/fd | grep -q socket"
  while [ ${bin_pid} ] && ! eval "${check_bin_cmd}" && [ ${wait_count} -lt 100 ] ; do
    sleep 1 ; wait_count=$((${wait_count} + 1))
  done
  if [ ${bin_pid} ] && eval "${check_bin_cmd}" ; then
    return 0
  else
    return 1
  fi
}

display_bin_status() {
  pid_file="${run_path}/$1.pid"
  if bin_pid=$(busybox pidof $1) ; then
    log Info "$1 has started with the $(stat -c %U:%G /proc/${bin_pid}) user group."
    log Info "$1 service is running. ( PID: ${bin_pid} )"
    if [ "${bin}" = "enable" ] ; then
      log Info "$1 memory usage: $(cat /proc/${bin_pid}/status | grep -w VmRSS | awk '{print $2$3}')"
      log Info "$1 cpu usage: $((/system/bin/ps -eo %CPU,NAME | grep $1 | awk '{print $1"%"}') 2> /dev/null || (dumpsys cpuinfo | grep $1 | awk '{print $1}'))"
      log Info "$1 running time: $(busybox ps -o comm,etime | grep $1 | awk '{print $2}')"
    fi
    if [ -s ${pid_file} ] ; then
      echo -n ${bin_pid} > ${pid_file}
    fi
    return 0
  else
    log Warn "$1 service is stopped."
    return 1
  fi
}

start_service() {
  pid_file="${run_path}/$1.pid"
  if check_permission $1 ; then
    log Info "$1 will be started with the ${box_user_group} user group."
    if [ $1 != "mosdns" || $1 != "AdguardHome" ] ; then
      [ "${proxy_method}" != "TPROXY" ] && create_tun_link
    fi
    if start_bin $1 && wait_bin_listen $1 ; then
      log Info "$1 service is running. ( PID: $(cat ${pid_file}) )"
      if [ $1 != "mosdns" || $1 != "AdguardHome" ] ; then
        probe_tun_device && forward -I
      fi
      return 0
    else
      if bin_pid=$(pidof $1) ; then
        log Warn "$1 service is running but may not listening. ( PID: ${bin_pid} )"
        if [ $1 != "mosdns" || $1 != "AdguardHome" ] ; then
          probe_tun_device && forward -I
        fi
        return 0
      else
        log Error "start $1 service failed, please check the ${run_path}/error_$1.log file."
        rm -f ${pid_file} >> /dev/null 2>&1
        return 1
      fi
    fi
  else
    log Error "missing $1 core, please download and place it in the ${box_path}/bin/ directory"
    return 2
  fi
}

stop_service() {
  pid_file="${run_path}/$1.pid"
  if display_bin_status $1 ; then
    log Warn "stopping $1 service."
    kill $(cat ${pid_file}) || killall $1
    forward -D >> /dev/null 2>&1
    sleep 1
    display_bin_status $1
  fi
  rm -f ${pid_file} >> /dev/null 2>&1
}

main() {
  case $1 in
    start)
      display_bin_status $2 || start_service $2
      ;;
    stop)
      stop_service $2
      ;;
    restart)
      stop_service $2
      sleep 2
      start_service $2
      ;;
    status)
      display_bin_status $2
      ;;
    *)
      log Error "$0 $1 usage: $0 {start|stop|restart|status}"
      ;;
  esac
}

if [ "${AdguardHome}" = "enable" ] ; then
  main $1 AdguardHome
  if [ "${bin}" = "enable" ] ; then
    sleep 1
  fi
fi

if [ "${mosdns}" = "enable" ] ; then
  main $1 mosdns
  if [ "${bin}" = "enable" ] ; then
    sleep 1
  fi
fi

if [ "${bin}" = "enable" ] ; then
  main $1 ${bin_name}
fi
